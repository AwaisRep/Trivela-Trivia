# Generated by Django 4.2.6 on 2024-05-03 20:17

from django.conf import settings
import django.contrib.auth.validators
import django.contrib.postgres.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        max_length=254, unique=True, verbose_name="email address"
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ClubBank",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("team_name", models.CharField(max_length=250)),
                ("description", models.CharField(max_length=250)),
            ],
        ),
        migrations.CreateModel(
            name="PlayerBank",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "player_names",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=250),
                        blank=True,
                        default=list,
                        size=None,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="TriviaBank",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("question", models.CharField(max_length=250)),
                (
                    "answer",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=250),
                        blank=True,
                        default=list,
                        size=None,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="UserHistory",
            fields=[
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        serialize=False,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                ("matches_played", models.IntegerField(default=0)),
                ("matches_won", models.IntegerField(default=0)),
                ("matches_drawn", models.IntegerField(default=0)),
                ("matches_lost", models.IntegerField(default=0)),
                ("user_points", models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name="UserChannel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("channel_name", models.CharField(max_length=255)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Trivia",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("gameID", models.AutoField(primary_key=True, serialize=False)),
                ("statistics_updated", models.BooleanField(default=False)),
                ("is_active", models.BooleanField(default=False)),
                ("start_time", models.DateTimeField(auto_now_add=True)),
                ("end_time", models.DateTimeField(blank=True, null=True)),
                (
                    "score_playerOne",
                    models.IntegerField(
                        default=0,
                        validators=[django.core.validators.MaxValueValidator(10)],
                    ),
                ),
                (
                    "score_playerTwo",
                    models.IntegerField(
                        default=0,
                        validators=[django.core.validators.MaxValueValidator(10)],
                    ),
                ),
                (
                    "player_one",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="playerOne",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "player_two",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="playerTwo",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "result",
                    models.ForeignKey(
                        default=None,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="Winner",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="MatchmakingQueue",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="GuessTheSide",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("gameID", models.IntegerField()),
                ("team_guess", models.CharField(max_length=100)),
                ("team_description", models.CharField(max_length=250)),
                ("guesses", models.IntegerField(default=0)),
                ("correct_scores", models.IntegerField(default=0)),
                ("result", models.BooleanField(default=False)),
                (
                    "points_received",
                    models.IntegerField(
                        default=0,
                        validators=[django.core.validators.MaxValueValidator(11)],
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="FormationBank",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "player_names",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=250),
                        blank=True,
                        default=list,
                        size=None,
                    ),
                ),
                ("position", models.CharField(max_length=10)),
                (
                    "club",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="api.clubbank"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="CareerPath",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("gameID", models.IntegerField()),
                ("player_guess", models.CharField(max_length=100)),
                ("guesses", models.IntegerField(default=0)),
                ("result", models.BooleanField(default=False)),
                (
                    "points_received",
                    models.IntegerField(
                        default=0,
                        validators=[django.core.validators.MaxValueValidator(1)],
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="CareerBank",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("team_name", models.CharField(max_length=250)),
                ("appearances", models.IntegerField()),
                ("goals", models.IntegerField()),
                ("assists", models.IntegerField()),
                ("is_loan", models.BooleanField(default=False)),
                (
                    "season",
                    models.CharField(
                        help_text="Enter the year in YYYY",
                        max_length=4,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Enter a valid year in YYYY format",
                                regex="^\\d{4}$",
                            )
                        ],
                    ),
                ),
                (
                    "player",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="careers",
                        to="api.playerbank",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="BoxToBox",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("gameID", models.IntegerField()),
                ("club_x1", models.CharField(max_length=100)),
                ("club_x2", models.CharField(max_length=100)),
                ("club_x3", models.CharField(max_length=100)),
                ("club_y1", models.CharField(max_length=100)),
                ("club_y2", models.CharField(max_length=100)),
                ("club_y3", models.CharField(max_length=100)),
                ("correct_scores", models.IntegerField(default=0)),
                ("guesses", models.IntegerField(default=0)),
                (
                    "points_received",
                    models.IntegerField(
                        default=0,
                        validators=[django.core.validators.MaxValueValidator(10)],
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PlayedGames",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("game_type", models.CharField(max_length=100)),
                ("game_id", models.IntegerField()),
                ("completed", models.BooleanField(default=False)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="played_games",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "unique_together": {("user", "game_type", "game_id")},
            },
        ),
    ]
